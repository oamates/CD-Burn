///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project		ZMediaServer
	ZEvent		Header File
	Create		20100611		ZHAOTT
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZEVENT_H_
#define	_ZEVENT_H_
///////////////////////////////////////////////////////////////////////////////
#include "Common.h"
#include "ZBaseStream.h"
#include "ZOSThread.h"
#include "ZTask.h"
#include "ZOSObjectTable.h"
///////////////////////////////////////////////////////////////////////////////
class	ZEvent;
class	ZEventThread;
///////////////////////////////////////////////////////////////////////////////
class ZEvent : public ZObject , public ZBaseStream
{
///////////////////////////////////////////////////////////////////////////////
public:
	enum	EVENT_STATE
	{
		SOCKET_BOUND		= 4,
		SOCKET_CONNECTED	= 8,
		IO_OPENED			= 16,
	};
	enum	EVENT_FLAG
	{
		EVENT_READ	= 1,
		EVENT_WRITE	= 2,
	};
///////////////////////////////////////////////////////////////////////////////
public:
	ZEvent(ZTask* pTask = NULL,ZEventThread* pEventThread = NULL);
	virtual ~ZEvent();
///////////////////////////////////////////////////////////////////////////////
public:
	UINT	GetStatus();
	int		GetHandle();
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL	SetTask(ZTask* pTask);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Create(int hHandle);
	virtual	BOOL	Close();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	RequestEvent(UINT nEvent);
	virtual	BOOL	RemoveEvent(UINT nEvent);
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual BOOL	ProcessEvent(UINT nEvent);
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT			m_nState;
	int				m_hHandle;
///////////////////////////////////////////////////////////////////////////////
protected:
	ZTask*			m_pEventTask;
	ZOSObject		m_EventObject;
	ZOSMutex		m_EventMutex;
///////////////////////////////////////////////////////////////////////////////
private:
	UINT			m_nEventUID;
	ZEventThread*	m_pEventThread;
///////////////////////////////////////////////////////////////////////////////
public:
	static	UINT	m_gEventUID;
///////////////////////////////////////////////////////////////////////////////
public:
	friend class	ZEventThread;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
class ZEventThread : public ZOSThread
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZEventThread();
	virtual ~ZEventThread();
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual BOOL	OnThreadStart();
	virtual BOOL	OnThreadEntry();
	virtual BOOL	OnThreadStop();
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual	BOOL	AddEvent(ZEvent* pEvent,UINT nEvent);
	virtual	BOOL	RemoveEvent(ZEvent* pEvent,UINT nEvent);
	virtual	BOOL	WaitForEvent();
	virtual	BOOL	OnEvent(int hHandle,UINT nEvent);
///////////////////////////////////////////////////////////////////////////////
protected:
	ZOSMutex		m_EventThreadMutex;
	ZOSObjectTable	m_EventThreadTable;
///////////////////////////////////////////////////////////////////////////////
public:
	friend class	ZEvent;
};
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZEVENT_H_
///////////////////////////////////////////////////////////////////////////////
