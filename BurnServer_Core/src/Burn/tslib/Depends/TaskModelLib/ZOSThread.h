///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project		ZMediaServer
	ZOSThread	Header File
	Create		20100603		ZHAOTT
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZTHREAD_H_
#define	_ZTHREAD_H_
///////////////////////////////////////////////////////////////////////////////
#include "ZOS.h"
#include "ZOSCond.h"
#include "ZOSMutex.h"
///////////////////////////////////////////////////////////////////////////////
#ifndef	_WIN32_
#include	<unistd.h>
#endif	//_WIN32_
///////////////////////////////////////////////////////////////////////////////
class	ZOSThread;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZOSThread : public ZObject
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSThread(CONST CHAR* sThreadName = NULL);
	virtual ~ZOSThread();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL Start();
	virtual	BOOL Stop(BOOL bWait = TRUE);
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual BOOL	OnThreadStart();
	virtual BOOL	OnThreadEntry();
	virtual BOOL	OnThreadStop();
///////////////////////////////////////////////////////////////////////////////
protected:
	BOOL	IsStop()	{return(m_bStop);	};
///////////////////////////////////////////////////////////////////////////////
private:
#if	defined(_WIN32_)
	static DWORD	m_sThreadStorageIndex;
#else
#if	defined(__PTHREADS__)
	static pthread_key_t	m_gMainKey;
#if	defined(_POSIX_THREAD_PRIORITY_SCHEDULING)
	static pthread_attr_t	m_sThreadAttr;
#endif	//(_POSIX_THREAD_PRIORITY_SCHEDULING)
#endif	//(__PTHREADS__)
#endif	//(_WIN32_)
///////////////////////////////////////////////////////////////////////////////
protected:
	BOOL		m_bStop;
	ZOSCond		m_ThreadCond;
	ZOSMutex	m_ThreadMutex;
    UINT        m_nID;
#if	defined(_WIN32_)
	HANDLE		m_pThreadID;
#elif	defined(_MINGW_)
	pthread_t	m_pThreadID;
#else
#if	defined(__PTHREADS__)
	pthread_t	m_pThreadID;
#else
	UINT		m_pThreadID;
#endif	//(__PTHREADS__)
#endif	//(_WIN32_)
///////////////////////////////////////////////////////////////////////////////
public:
	static void*	m_sMainThreadData;
///////////////////////////////////////////////////////////////////////////////
public:
	static void	Initialize();
	static void	Uninitialize();
#if	defined(_WIN32_)
	static UINT WINAPI _Entry(LPVOID pThreadParam);
#else
	static void* _Entry(void* pThreadParam);
#endif	//(_WIN32_)
	static ZOSThread*	GetCurrent();
///////////////////////////////////////////////////////////////////////////////
public:
#if	defined(_WIN32_)
	static DWORD	GetCurrentThreadID()		{ return ::GetCurrentThreadId(); };
#elif	defined(_MINGW_)
	static void*	GetCurrentThreadID()		{ return ::pthread_self().p; }
#else
#if	defined(__PTHREADS__)
	static pthread_t	GetCurrentThreadID()	{ return ::pthread_self(); }
#else
	static cthread_t	GetCurrentThreadID()	{ return ::cthread_self(); }
#endif	//(__PTHREADS__)
#endif	//(_WIN32_)
///////////////////////////////////////////////////////////////////////////////
public:
	static void Sleep(int nMSec);
	static int	GetError();
///////////////////////////////////////////////////////////////////////////////
public:
	static void	WaitForAllThread(DWORD nCount,ZOSThread** pThreads);
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZTHREAD_H_
///////////////////////////////////////////////////////////////////////////////
