///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project		ZMediaServer
	ZOS			Header File
	Create		20100603		ZHAOTT
	Modify		20120305		ZHAOTT		ZBase
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZOS_H_
#define	_ZOS_H_
///////////////////////////////////////////////////////////////////////////////
#include "Common.h"
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#if	defined(_WIN32_)
///////////////////////////////////////////////////////////////////////////////
#define		WIN32_LEAN_AND_MEAN
///////////////////////////////////////////////////////////////////////////////
#include	<windows.h>
///////////////////////////////////////////////////////////////////////////////
#elif defined(_LINUX_)||defined(_MINGW_)
///////////////////////////////////////////////////////////////////////////////
#define __PTHREADS__			1
#define	__PTHREADS_MUTEXES__	1
///////////////////////////////////////////////////////////////////////////////
#include	<pthread.h>
///////////////////////////////////////////////////////////////////////////////
#endif	//defined(_WIN32_)
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_BUILD_DATETIME	(__DATE__ " " __TIME__)
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_DATETIME_FORMAT			"%04d%02d%02d%02d%02d%02d"
#define	DEFAULT_SYSTEM_DATETIME_FORMAT	"%04dD%02dh%02dm%02ds"
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_BUILD_DATATIME_FORMAT	"%s %d %d %d:%d:%d"
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class	ZOSMutex;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZOS
{
///////////////////////////////////////////////////////////////////////////////
public:
	enum	OUTPUT_ATTRIBUTE
	{
		OS_NORMAL	= 0,	//Reset All Attributes (return to normal mode)
		OS_BRIGHT,			//Bright (Usually turns on BOLD)
		OS_DIM,				//Dim
		OS_UNDERLINE,		//Underline
		OS_BLINK,			//Blink
		OS_REVERSE,			//Reverse
		OS_HINDDEN,			//Hidden
	};
	enum	OUTPUT_COLOR
	{
		OS_BLACK	= 0,	//Black
		OS_RED,				//Red
		OS_GREEN,			//Green
		OS_YELLOW,			//Yellow
		OS_BLUE,			//Blue
		OS_MAGENTA,			//Magenta
		OS_CYAN,			//Cyan
		OS_WHITE,			//White
	};
///////////////////////////////////////////////////////////////////////////////
public:
	static void		Initialize();
	static void		Uninitialize();
///////////////////////////////////////////////////////////////////////////////
public:
	static unsigned int	systeminit(unsigned int* area,unsigned int val,int newval);
	static unsigned int	systemadd(unsigned int* area,int val = 1);
	static unsigned int	systemsub(unsigned int* area,int val = 1);
	static unsigned int	systemor(unsigned int* area,int val);
	static unsigned int	systemand(unsigned int* area,int val);
///////////////////////////////////////////////////////////////////////////////
public:
	static int		checkuser(const char* sUser,const char* sPassword);
///////////////////////////////////////////////////////////////////////////////
public:
	static UINT64	milliseconds();
	static INT64	microseconds();
	static INT64	getlastmicrosec();
	static void		setlastmicrosec(INT64 microsec);
	static void		sleepmicrosec(int microsec);
    static int      gettimeofdaycross(struct timeval* tp, int*);
///////////////////////////////////////////////////////////////////////////////
public:
	static UINT64	currenttime(time_t *ptimep = 0);
	static UINT64	systemtime(time_t *ptimep = 0);
///////////////////////////////////////////////////////////////////////////////
public:
	static char*	datetime(const char* sformat = 0,const time_t *ptimep = 0,char* sdatetime = 0,int* ndatetime = 0);
	static char*	datetime(const char* sformat,const char *sdatetimedata,const char *sdatetimeformat,char* sdatetime = 0,int* ndatetime = 0);
	static char*	systemdatetime(const char* sformat = 0,const time_t *ptimep = 0,char* sdatetime = 0,int* ndatetime = 0);
///////////////////////////////////////////////////////////////////////////////
public:
	static char* namefromfile(const char* sfile);
	static char* extendnamefromfile(const char* sfile);
	static char* pathfromfile(const char* sfile,char* spath,int* npath);
	static char* formatpath(const char* spath,char* sformatpath,int* nformatpath);
	static char* formaturl(const char* surl,char* sformaturl,int* nformaturl);
///////////////////////////////////////////////////////////////////////////////
public:
	static char* lower(char* s);
	static char* upper(char* s);
///////////////////////////////////////////////////////////////////////////////
public:
	static int checkdir(const char* sdir);
	static int makedir(const char* sdir);
	static int recursivemakedir(const char* sdir);
	static int setcurrentdir(const char* sdir);
///////////////////////////////////////////////////////////////////////////////
public:
    static int getlocalip(const char *sInterfaceName, char *sIP);
public:
	static int outputcolor(OUTPUT_ATTRIBUTE attr,OUTPUT_COLOR fgcolor,OUTPUT_COLOR bgcolor);
///////////////////////////////////////////////////////////////////////////////
public:
	static	BOOL	DecodeURL(	
								char* sURL,
								char** sProtocol,
								char** sHost = NULL,char** sPort = NULL,
								char** sUser = NULL,char** sPass = NULL,
								char** sPath = NULL
							);
    static	BOOL	URLUserClear(const char* sURL,char* sLocalURL,int nLocalURL);
///////////////////////////////////////////////////////////////////////////////
protected:
	static ZOSMutex*	m_sSystemMutex;
	static ZOSMutex*	m_sLastMillisMutex;
	static ZOSMutex*	m_sLastMicroMutex;
///////////////////////////////////////////////////////////////////////////////
protected:
	static INT64		m_sMsecSince1970;
	static INT64		m_sInitialMsec;
	static INT64		m_sInitialTime;
	static INT64		m_sCompareWrap;
	static INT64		m_sWrapMsec;
	static INT64		m_sLastMsecMilli;
///////////////////////////////////////////////////////////////////////////////
protected:
	static UINT64				m_nTimeFreq;
	static INT64				m_nLastMicroSec;
///////////////////////////////////////////////////////////////////////////////
protected:
	static const char *smonths[12];
	static const char *sweeks[7];
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZOS_H_
///////////////////////////////////////////////////////////////////////////////
