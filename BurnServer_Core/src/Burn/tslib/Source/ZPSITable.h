///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project				ZMediaServer
	ZPSITable			Header File
	Create				20120409		ZHAOTT		ZMedia
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZPSITABLE_H_
#define	_ZPSITABLE_H_
///////////////////////////////////////////////////////////////////////////////
#include "TSMedia.h"
///////////////////////////////////////////////////////////////////////////////
class	ZPSITable;
class	ZPATable;
class	ZPMTable;
class	ZCATable;
class	ZNITable;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_PSI_LENGTH_MAX			1021	//0x03FD
#define	DEFAULT_PSI_BUFFER_MAX			1024	//0x0400
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_PSI_SECTION_MAX			255		//0xFF
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_PSI_PROGRAM_MAX			253		//0xFD
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_PSI_ELEMENT_MAX			128		//0x80
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_DESCRIPTOR_LENGTH_MAX	255		//0xFF
#define	DEFAULT_DESCRIPTOR_BUFFER_MAX	255		//0xFF
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZPSISection
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZPSISection(UINT16 nSectionPID);
	virtual	~ZPSISection();
///////////////////////////////////////////////////////////////////////////////
public:
	UINT			GetLength();
	UINT			GetPayload();
	BOOL			GetComplete();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	CreateSection(UINT nSectionTID,UINT nSectionExtension,UINT nVersionNumber,UINT nSectionNumber,UINT nLastSectionNumber);
	virtual	BOOL	ResetSection();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	DWORD	GetBuffer(char* sdata,int ndata);
	virtual	DWORD	AppendBuffer(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Parse();
	virtual	BOOL	Write();
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT16			m_nSectionPID;
	UINT8			m_nSectionTID;
	UINT8			m_nSectionSSI;
	UINT16			m_nSectionHeader;
	UINT16			m_nSectionLength;
	UINT16			m_nSectionPoint;
	UINT16			m_nSectionData;
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT16			m_nSectionExtension;
	UINT8			m_nVersionNumber;
	UINT8			m_nCurrentIndicator;
	UINT8			m_nSectionNumber;
	UINT8			m_nLastSectionNumber;
///////////////////////////////////////////////////////////////////////////////
protected:
	BYTE			m_sBuffer[DEFAULT_PSI_BUFFER_MAX];
	UINT			m_nBuffer;
///////////////////////////////////////////////////////////////////////////////
protected:
	ZPSISection*	m_pNextSection;
///////////////////////////////////////////////////////////////////////////////
public:
	STATIC	BOOL	CheckNextSection(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
public:
	friend class	ZPSITable;	
	friend class	ZPATable;	
	friend class	ZPMTable;	
	friend class	ZCATable;	
	friend class	ZNITable;	
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZPSITable
{
///////////////////////////////////////////////////////////////////////////////
public:
	typedef	enum	_TABLE_TYPE_
	{
		PAT_TYPE	= 0,
		PMT_TYPE	= 1,
		CAT_TYPE	= 2,
		NIT_TYPE	= 3,
	}TABLE_TYPE;
///////////////////////////////////////////////////////////////////////////////
public:
	ZPSITable(UINT16 nTablePID,UINT8 nTableID);
	virtual ~ZPSITable();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Create();
	virtual	BOOL	Close();
///////////////////////////////////////////////////////////////////////////////
public:
	UINT			GetPID();
	UINT			GetTID();
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL			GetComplete();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Parse(char* sdata,int ndata);
	virtual	BOOL	Write(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	CreateSection();
	virtual	BOOL	AppendSection(ZPSISection* pSection);
	virtual	BOOL	ResetSections();
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual	BOOL	LinkSections();
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual	BOOL	DecodeSections();
	virtual	BOOL	EncodsSections();
///////////////////////////////////////////////////////////////////////////////
protected:
	void			AllocateSection(UINT16 nSectionPID);
	void			FreeSections();
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT16			m_nTablePID;
	UINT8			m_nTableID;
	UINT8			m_nPacketPCR;
	UINT8			m_nPacketScrambled;
	UINT8			m_nPacketCC;
///////////////////////////////////////////////////////////////////////////////
protected:
	BOOL			m_bSectionInit;
	BOOL			m_bSectionComplete;
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT16			m_nSectionExtension;
	UINT8			m_nVersionNumber;
	UINT8			m_nCurrentIndicator;
	UINT8			m_nSectionNumber;
	UINT8			m_nLastSectionNumber;
///////////////////////////////////////////////////////////////////////////////
protected:
	ZPSISection*	m_pCurrentSection;
///////////////////////////////////////////////////////////////////////////////
protected:
	DWORD			m_nTableBuffer;
	DWORD			m_nTablePayload;
///////////////////////////////////////////////////////////////////////////////
protected:
	ZPSISection*	m_pTableSection[DEFAULT_PSI_SECTION_MAX];
///////////////////////////////////////////////////////////////////////////////
public:
	STATIC	ZPSITable*	CreateTable(UINT nPID,UINT nType,UINT nExternID);
	STATIC	ZPSITable*	CloseTable(ZPSITable* pTable);
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZPATable : public ZPSITable
{
///////////////////////////////////////////////////////////////////////////////
public:
	typedef	struct	_PSI_PROGRAM_
	{
		DWORD			m_nProgrameID;
		DWORD			m_nProgramePID;
	}PSI_PROGRAM;
///////////////////////////////////////////////////////////////////////////////
public:
	ZPATable();
	virtual	~ZPATable();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Parse(char* sdata,int ndata);
	virtual	BOOL	Write(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	DecodeSections();
	virtual	BOOL	EncodsSections();
///////////////////////////////////////////////////////////////////////////////
public:
	DWORD			GetTransportStreamID();
	DWORD			SetTransportStreamID(DWORD nTransportStreamID);
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL			AddProgram(UINT nProgrameID,UINT nProgramePID);
	BOOL			GetProgram(UINT* nProgrameID,UINT* nProgramePID);
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT16			m_nProgramsIndex;
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT16			m_nPrograms;
	PSI_PROGRAM		m_sPrograms[DEFAULT_PSI_PROGRAM_MAX];
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZPMTable : public ZPSITable
{
///////////////////////////////////////////////////////////////////////////////
public:
typedef	struct	_PSI_ELEMENT_
{
	DWORD				m_nESType;
	DWORD				m_nESPID;
}PSI_ELEMENT;
///////////////////////////////////////////////////////////////////////////////
public:
	ZPMTable(UINT nPID);
	virtual	~ZPMTable();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Parse(char* sdata,int ndata);
	virtual	BOOL	Write(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	DecodeSections();
	virtual	BOOL	EncodsSections();
///////////////////////////////////////////////////////////////////////////////
public:
	DWORD			GetProgramNumber();
	DWORD			SetProgramNumber(DWORD nProgramNumber);
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL			AddElement(UINT nESType,UINT nESPID);
	BOOL			GetElement(UINT* nESType,UINT* nESPID);
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT			m_nElementsIndex;
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT			m_nElements;
	PSI_ELEMENT		m_sElements[DEFAULT_PSI_ELEMENT_MAX];
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class ZCATable : public ZPSITable
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZCATable();
	virtual	~ZCATable();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Parse(char* sdata,int ndata);
	virtual	BOOL	Write(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	DecodeSections();
	virtual	BOOL	EncodsSections();
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL			AddDescriptor(UINT nTAG,UINT nLen);
	BOOL			GetDescriptor(UINT* nTAG,UINT* nLen);
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//Optional Table
///////////////////////////////////////////////////////////////////////////////
class ZNITable : public ZPSITable
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZNITable(UINT nPID);
	virtual	~ZNITable();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	int		Parse(char* sdata,int ndata);
	virtual	int		Write(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	DecodeSections();
	virtual	BOOL	EncodsSections();
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL			AddDescriptor(UINT nTAG,UINT nLen);
	BOOL			GetDescriptor(UINT* nTAG,UINT* nLen);
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZPSITABLE_H_
///////////////////////////////////////////////////////////////////////////////
