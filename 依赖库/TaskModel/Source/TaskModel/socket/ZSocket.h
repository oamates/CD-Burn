///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project		ZMediaServer
	ZSocket		Header File
	Create		20100611		ZHAOTT
	Modify		20110906		ZHAOTT
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZSOCKET_H_
#define	_ZSOCKET_H_
///////////////////////////////////////////////////////////////////////////////
#include "Common.h"
#include "ZOSThread.h"
#include "ZEvent.h"
///////////////////////////////////////////////////////////////////////////////
#if	(defined(_WIN32_)||defined(_MINGW_))
#include	<winsock2.h>
#else
#include	<netinet/in.h>
#endif	//!(defined(_WIN32_)||defined(_MINGW_))
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class	ZSocket;
class	ZSocketThread;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_UDP_RECV_STREAM_SIZE	(4096)
#define	DEFAULT_UDP_SEND_STREAM_SIZE	(4096)
#define	DEFAULT_TCP_RECV_STREAM_SIZE	(4096)
#define	DEFAULT_TCP_SEND_STREAM_SIZE	(4096)
#define	DEFAULT_UDP_RECV_BUFFER_SIZE	(4096*120)
#define	DEFAULT_UDP_SEND_BUFFER_SIZE	(4096*120)
#define	DEFAULT_TCP_RECV_BUFFER_SIZE	(4096*120)
#define	DEFAULT_TCP_SEND_BUFFER_SIZE	(4096*120)
#define	DEFAULT_UDP_SEND_TIMEOUT		(9000)
#define	DEFAULT_UDP_RECV_TIMEOUT		(3000)
#define	DEFAULT_TCP_SEND_TIMEOUT		(9000)
#define	DEFAULT_TCP_RECV_TIMEOUT		(3000)
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZSocket : public ZEvent
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZSocket(ZTask* pTask = NULL);
	virtual ~ZSocket();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	StreamSeek(UINT64 nPos);
///////////////////////////////////////////////////////////////////////////////
public:
	static	void	Initialize();
	static	void	Uninitialize();
	static	void	StartEventThread();
	static	void	StopEventThread();
	static	ZEventThread* GetEventThread();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Bind(UINT nAddr,UINT nPort);
	virtual	BOOL	Unbind();
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL	SetNonBlocking(BOOL bNonBlocking = TRUE);
	BOOL	SetReuseAddr(BOOL bReuseAddr = TRUE);
	BOOL	SetNoDelay(BOOL bNoDelay = TRUE);
	BOOL	SetKeepAlive(BOOL bKeepAlive = TRUE);
	BOOL	SetSendBufferSize(int nValue);
	BOOL	SetRecvBufferSize(int nValue);
	BOOL	SetTimeOut(int sndTime,int rcvTime);
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL	IsBound();
	BOOL	IsConnected();
	BOOL	IsReadable(int nUsecond = 0);
	BOOL	IsWriteable(int nUsecond = 0);
	BOOL	IsError(int nUsecond = 0);
///////////////////////////////////////////////////////////////////////////////
public:
	UINT	GetSocket();
	UINT	GetLocalAddr();
	UINT	GetLocalPort();
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual	BOOL	Create(UINT nType, INT nAddrFamily = AF_INET);
	virtual	BOOL	Close();
///////////////////////////////////////////////////////////////////////////////
protected:
	int					m_hSocket;
    int                 m_nAddrFamily;
	BOOL				m_bNonBlocking;
	struct	sockaddr_in	m_LocalAddr;
	struct	sockaddr_in	m_DestAddr;
///////////////////////////////////////////////////////////////////////////////
private:
	static	ZEventThread*	m_pEventThread;
///////////////////////////////////////////////////////////////////////////////
public:
	static	UINT	ConvertAddr(const char* sAddr);
	static	char*	ConvertAddr(UINT nAddr);
	static	BOOL	IsMulticastAddr(UINT nAddr);
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
class ZSocketEventThread : public ZEventThread
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZSocketEventThread();
	virtual ~ZSocketEventThread();
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual	BOOL	AddEvent(ZEvent* pEvent,UINT nFlag);
	virtual	BOOL	RemoveEvent(ZEvent* pEvent,UINT nFlag);
	virtual	BOOL	WaitForEvent();
///////////////////////////////////////////////////////////////////////////////
private:
	int			m_nMonitorUSeconds;
///////////////////////////////////////////////////////////////////////////////
private:
	int			m_nMonitorSetFromSelect;
	int			m_nMonitorSetProcessed;
	int			m_nMonitorSetRead;
	int			m_nMonitorSetHandle;
///////////////////////////////////////////////////////////////////////////////
private:
	ZOSMutex	m_SocketEventMutex;
///////////////////////////////////////////////////////////////////////////////
private:
	int			m_MonitorMaxSet;
	fd_set		m_ReadSet;
	fd_set		m_WriteSet;
	fd_set		m_MonitorReadSet;
	fd_set		m_MonitorWriteSet;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZSOCKET_H_
///////////////////////////////////////////////////////////////////////////////
