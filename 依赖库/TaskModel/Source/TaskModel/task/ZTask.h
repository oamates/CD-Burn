///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project		ZMediaServer
	ZTask		Header File
	Create		20100611		ZHAOTT
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZTASK_H_
#define	_ZTASK_H_
///////////////////////////////////////////////////////////////////////////////
#include "Common.h"
#include "ZOSThread.h"
#include "ZOSHeap.h"
#include "ZOSQueue.h"
#include "ZOSMemory.h"
#include "ZOSArray.h"
///////////////////////////////////////////////////////////////////////////////
class	ZTask;
class	ZTaskThread;
class	ZTaskThreadPool;
///////////////////////////////////////////////////////////////////////////////
#define	DEFAULT_INIT_THREAD		90
///////////////////////////////////////////////////////////////////////////////
//ZTask
///////////////////////////////////////////////////////////////////////////////
class ZTask : public ZObject
{
///////////////////////////////////////////////////////////////////////////////
public:
	enum	TASK_EVENT
	{
		//Read,Write
		TASK_READ_EVENT		= (0x01<<0x00),
		TASK_WRITE_EVENT	= (0x01<<0x01),
		//Start,Stop,Timeout
		TASK_START_EVENT	= (0x01<<0x02),
		TASK_STOP_EVENT		= (0x01<<0x03),
		TASK_TIMEOUT_EVENT	= (0x01<<0x04),
		//Kill
		TASK_KILL_EVENT		= (0x01<<0x0D),
		//Update,Idle
		TASK_UPDATE_EVENT	= (0x01<<0x0E),
		TASK_IDLE_EVENT		= (0x01<<0x0F),
		//Event Mask
		TASK_EVENT_MASK		= 0x00FFFFFF,
		//Alive
		TASK_ALIVE_STATUS	= 0x0F000000,
	};
///////////////////////////////////////////////////////////////////////////////
public:
	ZTask(CONST CHAR* sTaskName);
	virtual	~ZTask();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	AddEvent(ZTask::TASK_EVENT nEvent);
	virtual	BOOL	RemoveEvent();
	virtual	UINT	GetEvent(int nEvent);
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL			TaskRun();
///////////////////////////////////////////////////////////////////////////////
public:
	UINT	GetTaskThreadBegin()			{return(m_nTaskThreadBegin);							}
	UINT	SetTaskThreadBegin(UINT nValue)	{m_nTaskThreadBegin=nValue;return(m_nTaskThreadBegin);	}
	UINT	GetTaskThreadBound()			{return(m_nTaskThreadBound);							}
	UINT	SetTaskThreadBound(UINT nValue)	{m_nTaskThreadBound=nValue;return(m_nTaskThreadBound);	}
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	int		Create();
	virtual	int		Close();
protected:
	virtual	int		Run(int nEvent = 0);
	virtual	int		Lock();
	virtual	int		TryLock();
	virtual	int		Unlock();
///////////////////////////////////////////////////////////////////////////////
protected:
	BOOL			m_bTaskRun;
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT			m_nTaskEventFlag;
	UINT			m_nTaskThreadBegin;
	UINT			m_nTaskThreadBound;
///////////////////////////////////////////////////////////////////////////////
protected:
	ZOSMutex		m_TaskMutex;
	ZOSMutex		m_EventMutex;
	ZOSHeapElement	m_OSHeapElement;
	ZOSQueueElement	m_OSQueueElement;
	ZTaskThread*	m_DefaultTaskThread;
	ZTaskThread*	m_CurrentTaskThread;
	ZTaskThread*	m_UsedTaskThread;
///////////////////////////////////////////////////////////////////////////////
public:
	static	unsigned int	m_nTaskThreadIndex;
///////////////////////////////////////////////////////////////////////////////
public:
	friend class	ZTaskThread;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
//ZTaskThread
///////////////////////////////////////////////////////////////////////////////
class ZTaskThread : public ZOSThread
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZTaskThread(CONST CHAR* sThreadName);
	virtual ~ZTaskThread();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL		Start();
	virtual	BOOL		Stop(BOOL bWait = TRUE);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	AddTask(ZTask* pTask);
	virtual	BOOL	RemoveTask(ZTask* pTask);
///////////////////////////////////////////////////////////////////////////////
public:
///////////////////////////////////////////////////////////////////////////////
protected:
	ZTask*	WaitForTask();
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual BOOL	OnThreadStart();
	virtual BOOL	OnThreadEntry();
	virtual BOOL	OnThreadStop();
protected:
    UINT GetTaskThreadTaskLoad();
    BOOL AddTaskToArray(ZTask *pTask);
    BOOL RemoveTaskFormArray(ZTask *pTask);
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT64				m_TaskThreadTime;
	ZOSHeap				m_TaskThreadHeap;
	ZOSMutex			m_TaskThreadMutex;
	ZOSQueueBlocking	m_TaskThreadQueue;
	UINT				m_nTaskThreadLoad;
    ZOSArray<ZTask*>    m_arrayTask;
    ///////////////////////////////////////////////////////////////////////////////
public:
	friend class	ZTask;
	friend class	ZTaskThreadPool;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
//ZTaskThreadPool
///////////////////////////////////////////////////////////////////////////////
class ZTaskThreadPool
{
///////////////////////////////////////////////////////////////////////////////
public:
///////////////////////////////////////////////////////////////////////////////
public:
	static	void	Initialize(UINT nPoolThreadCount = 20, UINT nNoBlockTaskThreadCount = 0);
	static	void	Uninitialize();
	static	void	StartTaskThread();
	static	void	StopTaskThread();
///////////////////////////////////////////////////////////////////////////////
public:
	static	int		GetTaskThreadCounter();
	static	int		SetTaskThreadCounter(int nCount);
	static	int		GetNoBlockTaskThreadCounter();
///////////////////////////////////////////////////////////////////////////////
public:
	static	int		AddTaskEvent();
	static	int		SubTaskEvent();
///////////////////////////////////////////////////////////////////////////////
public:
	static	ZTaskThread*	GetTaskThread(UINT nIndex);
///////////////////////////////////////////////////////////////////////////////
private:
	static	UINT				m_nTaskThreadCounter;
	static	UINT				m_nNoBlockTaskThreadCounter;
	static	UINT				m_nTaskEventCounter;
	static	UINT				m_nTaskThreadLoad;
///////////////////////////////////////////////////////////////////////////////
private:
	static	ZTaskThread**	m_ppTaskThread;
    static  ZOSMutex        m_mutexGetTaskThread;
///////////////////////////////////////////////////////////////////////////////
public:
	friend class	ZTask;
	friend class	ZTaskThread;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZTASK_H_
///////////////////////////////////////////////////////////////////////////////
