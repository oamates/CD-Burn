///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project			ZMediaServer
	ZRTPSocketPool	Header File
	Create			20100810		ZHAOTT		RTP
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZRTPSOCKETPOOL_H_
#define	_ZRTPSOCKETPOOL_H_
///////////////////////////////////////////////////////////////////////////////
#include "ZOSQueue.h"
#include "ZOSMutex.h"
#include "ZRTCPTask.h"
///////////////////////////////////////////////////////////////////////////////
class	ZRTPSocketPool;
///////////////////////////////////////////////////////////////////////////////
class	ZUDPSocket;
class	ZRTCPTask;
class	ZUDPSocketPair;
class	ZRTPSocketPool;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZUDPSocketPair
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZUDPSocketPair();
	virtual	~ZUDPSocketPair();
///////////////////////////////////////////////////////////////////////////////
public:
	BOOL		Set(ZUDPSocket* pUDPSocketA,ZUDPSocket* pUDPSocketB);
	int			UDPSocketASendTo(const void* sdata,const int ndata,UINT RemoteAddr,UINT RemotePort,int* nSend);
	int			UDPSocketBSendTo(const void* sdata,const int ndata,UINT RemoteAddr,UINT RemotePort,int* nSend);
	int			UDPSocketARecvFrom(void* sdata,int ndata,UINT* RemoteAddr,UINT* RemotePort,int* nRecv);
	int			UDPSocketBRecvFrom(void* sdata,int ndata,UINT* RemoteAddr,UINT* RemotePort,int* nRecv);
///////////////////////////////////////////////////////////////////////////////
public:
	ZUDPSocket*	GetUDPSocketA()
				{return(m_pUDPSocketA);};
	ZUDPSocket*	GetUDPSocketB()
				{return(m_pUDPSocketB);};
	ZOSMutex*	GetUDPSocketPairMutex()
				{return(&m_UDPSocketPairMutex);};
///////////////////////////////////////////////////////////////////////////////
public:
	static int GetPacketInterval();
	static UINT GetFilterPacketSize();
	static void SetPacketInterval(int nPacketInterval);
	static void SetFilterPacketSize(UINT nFilterPacketSize);
///////////////////////////////////////////////////////////////////////////////
private:
	ZOSQueueElement		m_OSQueueElement;
	ZOSMutex			m_UDPSocketPairMutex;
	ZUDPSocket*			m_pUDPSocketA;
	ZUDPSocket*			m_pUDPSocketB;
	UINT				m_nUsedCount;
///////////////////////////////////////////////////////////////////////////////
protected:
	// micro second
	static				int m_nPacketInterval;
	static				UINT m_nFilterPacketSize;
///////////////////////////////////////////////////////////////////////////////
public:
	friend	class		ZRTPSocketPool;

	UINT                m_nSendCount;

	BOOL                m_bFrameStartFlag;
	INT64              m_bFrameStartTime;
	INT                m_nFramePacCount;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZRTPSocketPool
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZRTPSocketPool();
	virtual ~ZRTPSocketPool();
///////////////////////////////////////////////////////////////////////////////
public:
	ZUDPSocketPair*	CreateUDPSocketPair(int nAddr,int nPort);
	ZUDPSocketPair*	CloseUDPSocketPair(ZUDPSocketPair* pPair);
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSQueue*	GetUDPSocketPairQueue()
				{return(&m_UDPSocketPairQueue);};
	ZOSMutex*	GetUDPSocketPairMutex()
				{return(&m_RTPSocketPoolMutex);};
///////////////////////////////////////////////////////////////////////////////
public:
	static	ZUDPSocketPair*	GetUDPSocketPair();
	static	ZUDPSocketPair*	SetupUDPSocketPair(int nAddr);
	static  ZUDPSocketPair* SetupUDPSocketPairMulticast(DWORD nAddr,DWORD nPort);
	static	BOOL			ReleaseUDPSocketPair(ZUDPSocketPair* pPair);
	static	UINT			GetPairCount();
	static	void			SetPairCount(UINT nPairCount);
///////////////////////////////////////////////////////////////////////////////
private:
	ZOSQueue	m_UDPSocketPairQueue;
///////////////////////////////////////////////////////////////////////////////
private:
	static	ZRTPSocketPool*		m_pRTPSocketPool;
	static	ZRTCPTask*			m_pRTCPTask;
	static	ZOSMutex			m_RTPSocketPoolMutex;
///////////////////////////////////////////////////////////////////////////////
public:
	static	UINT	m_RTPPort;
	static	UINT	m_nPairs;
	static	UINT	m_nPairIndex;
///////////////////////////////////////////////////////////////////////////////
public:
	static	void	Initialize();
	static	void	Uninitialize();
///////////////////////////////////////////////////////////////////////////////
public:
	static	UINT	GetRTPPort();
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZRTPSOCKETPOOL_H_
///////////////////////////////////////////////////////////////////////////////
