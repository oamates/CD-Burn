#include "Packetizer3640.h"
#include "ZUDPSocket.h"

unsigned char g_sDumyData[342] = {
    0x21, 0x1c, 0x48, 0xfd, 0xf3, 0xff, 0xe8, 0x00, 0x01, 0xf8, 0xe2, 0x4b, 0x12, 0x04, 0x46, 0xa2,
    0x54, 0x51, 0x50, 0xa8, 0x02, 0x56, 0x18, 0x06, 0x58, 0x3b, 0xd3, 0xe9, 0x4d, 0xb9, 0xb5, 0x44,
    0x6f, 0xa0, 0x08, 0x0a, 0x1d, 0x44, 0xf5, 0x09, 0x53, 0x68, 0x44, 0x05, 0x42, 0xac, 0x16, 0x50,
    0x6c, 0x14, 0xac, 0x00, 0x00, 0x3c, 0x21, 0xcc, 0xaa, 0xbd, 0x75, 0x47, 0xea, 0xe9, 0xd2, 0x9b,
    0x5b, 0x43, 0x4a, 0xc9, 0xc0, 0xe5, 0x2a, 0x40, 0xb0, 0x02, 0x44, 0x86, 0x1a, 0x40, 0xfc, 0x86,
    0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e
};

Packetizer3640::Packetizer3640()
{
    m_nLastTimestamp = 0;
}

Packetizer3640::~Packetizer3640()
{
    //
}

int Packetizer3640::ProcessFrame(char *pData, int nData)
{
    unsigned char sRTPPacket[DEFAULT_UDP_BUFFER_USED];
    int nCurSeqNo;

    if (m_nLastTimestamp == 0)
    {
        m_nLastTimestamp = GetFrameTimestamp();
    }
#if 0
    int nMoreSend = 0;
    if (GetFrameTimestamp() > m_nLastTimestamp)
    {
        //used for audio not use timestamp, but use 1024 as each duration.
        nMoreSend = (GetFrameTimestamp()-m_nLastTimestamp)/1024 - 1;
        //if (nMoreSend > 0 && nMoreSend < 200)
        //{
        //    LOG_DEBUG(("[Packetizer3640::ProcessFrame] total fake count = %d last %d cur %d diff %d\r\n", 
        //        nMoreSend, m_nLastTimestamp, GetFrameTimestamp(), GetFrameTimestamp()-m_nLastTimestamp));
        //}

        if (IsPatchFrame() && nMoreSend > 1 && nMoreSend < 200)
        {
#if 1
            UINT nFakeTimestamp = m_nLastTimestamp;
            char szFakeAudioData[1024];
            int nFakeDataSize = 342;
            memcpy(szFakeAudioData, g_sDumyData, nFakeDataSize);
            while (nMoreSend > 0 && nMoreSend < 200)
            {
                nMoreSend --;
                nFakeTimestamp += 1024;
                nCurSeqNo = GetSeqNo();
                IncreaseSeqNo();
                memset(sRTPPacket, 0, DEFAULT_UDP_BUFFER_USED);
                sRTPPacket[0] = 0x80;
                sRTPPacket[1] = GetPayloadType()&0x7F;
                //marker=true
                sRTPPacket[1] = sRTPPacket[1]|0x80;
                sRTPPacket[2] = (nCurSeqNo&0xFF00)>>8;
                sRTPPacket[3] = nCurSeqNo&0xFF;
                sRTPPacket[4] = (nFakeTimestamp&0xFF000000)>>24;
                sRTPPacket[5] = (nFakeTimestamp&0xFF0000)>>16;
                sRTPPacket[6] = (nFakeTimestamp&0xFF00)>>8;
                sRTPPacket[7] = (nFakeTimestamp&0xFF);
                sRTPPacket[8] = (GetSSRC()&0xFF000000)>>24;
                sRTPPacket[9] = (GetSSRC()&0xFF0000)>>16;
                sRTPPacket[10] = (GetSSRC()&0xFF00)>>8;
                sRTPPacket[11] = (GetSSRC()&0xFF);
                sRTPPacket[12] = 0x00;
                sRTPPacket[13] = 0x10;
                sRTPPacket[14] = nFakeDataSize >> 5;
                sRTPPacket[15] = (nFakeDataSize&0x1F)<<3;

                memcpy(sRTPPacket+16, szFakeAudioData, nFakeDataSize);
                SendData(1, sRTPPacket, 16+nFakeDataSize);
            }
#endif
        }
    }
#endif

    //normal send
    nCurSeqNo = GetSeqNo();
    IncreaseSeqNo();
    memset(sRTPPacket, 0, DEFAULT_UDP_BUFFER_USED);
    sRTPPacket[0] = 0x80;
    sRTPPacket[1] = GetPayloadType()&0x7F;
    //marker=true
    sRTPPacket[1] = sRTPPacket[1]|0x80;
    sRTPPacket[2] = (nCurSeqNo&0xFF00)>>8;
    sRTPPacket[3] = nCurSeqNo&0xFF;
    sRTPPacket[4] = (GetFrameTimestamp()&0xFF000000)>>24;
    sRTPPacket[5] = (GetFrameTimestamp()&0xFF0000)>>16;
    sRTPPacket[6] = (GetFrameTimestamp()&0xFF00)>>8;
    sRTPPacket[7] = (GetFrameTimestamp()&0xFF);
    sRTPPacket[8] = (GetSSRC()&0xFF000000)>>24;
    sRTPPacket[9] = (GetSSRC()&0xFF0000)>>16;
    sRTPPacket[10] = (GetSSRC()&0xFF00)>>8;
    sRTPPacket[11] = (GetSSRC()&0xFF);
    sRTPPacket[12] = 0x00;
    sRTPPacket[13] = 0x10;
    sRTPPacket[14] = nData >> 5;
    sRTPPacket[15] = (nData&0x1F)<<3;

    memcpy(sRTPPacket+16, pData, nData);

    SendData(1, sRTPPacket, 16+nData);

    m_nLastTimestamp = GetFrameTimestamp();

    return 0;
}
