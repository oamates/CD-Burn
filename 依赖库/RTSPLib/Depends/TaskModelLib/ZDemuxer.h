///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project		ZMediaServer
	ZDemuxer	Header File
	Create		20110310		ZHAOTT
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZDEMUXER_H_
#define	_ZDEMUXER_H_
///////////////////////////////////////////////////////////////////////////////
#include "Common.h"
#include "ZOSHashTable.h"
#include "ZOSMutex.h"
#include "ZTask.h"
///////////////////////////////////////////////////////////////////////////////
class	ZDemuxer;
class	ZDemuxerTask;
class	ZDemuxerKey;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef ZOSHashTable<ZDemuxerTask,ZDemuxerKey>	ZDemuxerHashTable;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//ZDemuxerTask
///////////////////////////////////////////////////////////////////////////////
class ZDemuxerKey
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZDemuxerKey(ZDemuxerTask* pTask);
	virtual	~ZDemuxerKey();
///////////////////////////////////////////////////////////////////////////////
public:
	int					GetHashValue();
	char*				GetHashKey();
///////////////////////////////////////////////////////////////////////////////
public:
	friend int operator ==(const ZDemuxerKey &key1, const ZDemuxerKey &key2)
	{
		return (strcmp(key1.m_sHashKey,key2.m_sHashKey) == 0);
	}
///////////////////////////////////////////////////////////////////////////////
private:
	int				m_nHashValue;
	char			m_sHashKey[MAX_KEY_LABEL+4];
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//ZDemuxerTask
///////////////////////////////////////////////////////////////////////////////
class ZDemuxerTask : public ZTask
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZDemuxerTask(CONST CHAR* sTaskName);
	virtual	~ZDemuxerTask();
///////////////////////////////////////////////////////////////////////////////
public:
	int					GetHashValue();
	char*				GetHashKey();
	ZDemuxerTask*		GetNextHashEntry();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	int			HashValue()	= 0;
///////////////////////////////////////////////////////////////////////////////
private:
	int					m_nHashValue;
	char				m_sHashKey[MAX_KEY_LABEL+4];
	ZDemuxerTask*		m_pNextHashEntry;
///////////////////////////////////////////////////////////////////////////////
public:
	friend	class	ZDemuxerKey;
	friend	class	ZDemuxer;
	friend	class	ZOSHashTable<ZDemuxerTask,ZDemuxerKey>;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//ZDemuxer
///////////////////////////////////////////////////////////////////////////////
class ZDemuxer : public ZObject
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZDemuxer();
	virtual ~ZDemuxer();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL		AddTask(ZDemuxerTask* pTask);
	virtual	BOOL		RemoveTask(ZDemuxerTask* pTask);
///////////////////////////////////////////////////////////////////////////////
public:
	ZDemuxerTask*		GetTask(ZDemuxerKey* pKey);
///////////////////////////////////////////////////////////////////////////////
protected:
	ZDemuxerHashTable	m_DemuxerHashTable;
	ZOSMutex			m_DemuxerMutex;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZDEMUXER_H_
///////////////////////////////////////////////////////////////////////////////
