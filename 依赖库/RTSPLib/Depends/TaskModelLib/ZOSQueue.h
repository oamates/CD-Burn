///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project		ZMediaServer
	ZOSQueue	Header File
	Create		20100629		ZHAOTT
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZOSQUEUE_H_
#define	_ZOSQUEUE_H_
///////////////////////////////////////////////////////////////////////////////
#include "Common.h"
#include "ZOSCond.h"
#include "ZOSMutex.h"
#include "ZOSThread.h"
///////////////////////////////////////////////////////////////////////////////
class	ZOSQueue;
class	ZOSQueueElement;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class	ZOSQueueElement
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSQueueElement(void* pObject = NULL);
	virtual	~ZOSQueueElement();
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSQueueElement*	GetPrev();
	ZOSQueueElement*	GetNext();
	ZOSQueue*			GetQueue();
	void*				GetObject();
	void*				SetObject(void* pObject);
	BOOL				IsMember(ZOSQueue* pQueue = NULL);
	BOOL				Remove();
///////////////////////////////////////////////////////////////////////////////
private:
	ZOSQueueElement*	m_pPrev;
	ZOSQueueElement*	m_pNext;
	ZOSQueue*			m_pQueue;
	void*				m_pObject;
///////////////////////////////////////////////////////////////////////////////
public:
	friend	class		ZOSQueue;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
class ZOSQueue : public ZObject
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSQueue(CONST CHAR* sQueueName = NULL);
	virtual ~ZOSQueue();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	ZOSQueueElement*	Push(ZOSQueueElement* pQueueElement);
	virtual	ZOSQueueElement*	Pop();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL				Remove(ZOSQueueElement* pQueueElement);
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSQueueElement*			GetHead();
	ZOSQueueElement*			GetTail();
	int							GetLength();
///////////////////////////////////////////////////////////////////////////////
public:
	typedef	struct	_ELEMENT_FIND_HANDLE_
	{
		ZOSQueueElement*	m_pCurrentElement;
	}ELEMENT_FIND_HANDLE,*PELEMENT_FIND_HANDLE;
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSQueueElement*			GetFirst(PELEMENT_FIND_HANDLE pHandle);
	ZOSQueueElement*			GetNext(PELEMENT_FIND_HANDLE pHandle);
	ZOSQueueElement*			GetCurrent(PELEMENT_FIND_HANDLE pHandle);
///////////////////////////////////////////////////////////////////////////////
private:
	ZOSQueueElement				m_QueueElement;
	int							m_nLength;
///////////////////////////////////////////////////////////////////////////////
public:
	friend	class				ZOSQueueElement;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
class ZOSQueueBlocking : public ZOSQueue
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSQueueBlocking();
	virtual	~ZOSQueueBlocking();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	ZOSQueueElement*	Push(ZOSQueueElement* pQueueElement);
	virtual	ZOSQueueElement*	PopBlocking(ZOSMutex* pMutex,int nMSec);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL				Remove(ZOSQueueElement* pQueueElement);
///////////////////////////////////////////////////////////////////////////////
public:
	ZOSCond*					GetQueueCond();
	void						Signal();
///////////////////////////////////////////////////////////////////////////////
private:
	ZOSCond						m_QueueCond;
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZOSQUEUE_H_
///////////////////////////////////////////////////////////////////////////////
