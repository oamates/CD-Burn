///////////////////////////////////////////////////////////////////////////////
/******************************************************************************
	Project				ZMediaServer
	ZPESPacket			Header File
	Create				20120409		ZHAOTT		ZMedia
******************************************************************************/
///////////////////////////////////////////////////////////////////////////////
#ifndef	_ZPESPACKET_H_
#define	_ZPESPACKET_H_
///////////////////////////////////////////////////////////////////////////////
#include "TSMedia.h"
///////////////////////////////////////////////////////////////////////////////
class	ZPESPacket;
///////////////////////////////////////////////////////////////////////////////
#define DEFAULT_PES_LENGTH_MAX			(65500)		//0x0FFDC
#define DEFAULT_PES_BUFFER_MAX			(65535)		//0x0FFFF
#define DEFAULT_PES_VIDEO_BUFFER_MAX	(1024*256)	//0x40000
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ZPESPacket
{
///////////////////////////////////////////////////////////////////////////////
public:
	ZPESPacket(UINT nPacketPID,UINT nType);
	virtual ~ZPESPacket();
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Create();
	virtual	BOOL	Close();
///////////////////////////////////////////////////////////////////////////////
public:
	UINT			GetPID();
	UINT			GetSID();
	UINT			SetSID(UINT nSID);
	BOOL			SetPCR(BOOL bPCR);
///////////////////////////////////////////////////////////////////////////////
public:
	UINT64			GetSampleNumber();
///////////////////////////////////////////////////////////////////////////////
public:
	UINT			GetLength();
	BOOL			GetComplete();
///////////////////////////////////////////////////////////////////////////////
public:
	DWORD			GetSample(CHAR* sSample,UINT nSample);
	DWORD			SetSample(CHAR* sSample,UINT nSample,UINT64 nSamplePTS,UINT64 nSampleDTS);
///////////////////////////////////////////////////////////////////////////////
public:
	DWORD			GetBuffer(char* sdata,int ndata);
	DWORD			AppendBuffer(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
public:
	virtual	BOOL	Parse(char* sdata,int ndata);
	virtual	BOOL	Write(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual	BOOL	ParsePCR(char* sdata,int ndata);
	virtual	BOOL	WritePCR(char* sdata,int ndata);
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual	BOOL	ParsePESHeader();
	virtual	BOOL	WritePESHeader();
///////////////////////////////////////////////////////////////////////////////
protected:
	virtual	BOOL	DecodePacket();
	virtual	BOOL	EncodePacket();
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT16			m_nPacketPID;
	UINT16			m_nPacketType;
	UINT8			m_nStreamID;
	UINT8			m_nPacketPCR;
	UINT8			m_nPacketScrambled;
	UINT8			m_nPacketCC;
	UINT8			m_nPacketHeader;
	UINT8			m_nPacketPayload;
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT64			m_nSampleNumber;
	UINT64			m_nSamplePTS;
	UINT64			m_nSampleDTS;
	UINT64			m_nSystemPCR;
///////////////////////////////////////////////////////////////////////////////
protected:
	UINT32			m_nBufferLength;
	UINT32			m_nBufferPoint;
	UINT32			m_nPacketNumber;
	BOOL			m_bBufferComplete;
///////////////////////////////////////////////////////////////////////////////
protected:
	BYTE*			m_sBuffer;
	UINT			m_nBuffer;
///////////////////////////////////////////////////////////////////////////////
public:
	STATIC	ZPESPacket*		CreatePacket(UINT nPacketPID,UINT nType,UINT nExternID);
	STATIC	ZPESPacket*		ClosePacket(ZPESPacket* pPacket);
///////////////////////////////////////////////////////////////////////////////
};
///////////////////////////////////////////////////////////////////////////////
#endif	//_ZPESPACKET_H_
///////////////////////////////////////////////////////////////////////////////
