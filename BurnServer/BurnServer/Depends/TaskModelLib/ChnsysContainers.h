#ifndef _CHNSYSCONTAINERS_H_
#define _CHNSYSCONTAINERS_H_

#include "ChnsysTypes.h"

// int array
typedef VOID *OS_INTARRAY_HANDLE;
OS_INTARRAY_HANDLE OS_INTARRAY_CreateInstance(CHNSYS_UINT nInitSize);
VOID OS_INTARRAY_DestroyInstance(OS_INTARRAY_HANDLE hIntArray);
CHNSYS_INT OS_INTARRAY_Add(OS_INTARRAY_HANDLE hIntArray, CHNSYS_INT nValue);
CHNSYS_INT OS_INTARRAY_Set(OS_INTARRAY_HANDLE hIntArray, CHNSYS_INT nIndex, CHNSYS_INT nValue);
CHNSYS_INT OS_INTARRAY_Insert(OS_INTARRAY_HANDLE hIntArray, CHNSYS_INT nIndex, CHNSYS_INT nValue);
CHNSYS_INT OS_INTARRAY_Remove(OS_INTARRAY_HANDLE hIntArray, CHNSYS_INT nIndex);
CHNSYS_INT OS_INTARRAY_RemoveAll(OS_INTARRAY_HANDLE hIntArray);
CHNSYS_INT OS_INTARRAY_Count(OS_INTARRAY_HANDLE hIntArray);
CHNSYS_INT OS_INTARRAY_At(OS_INTARRAY_HANDLE hIntArray, CHNSYS_INT nIndex, CHNSYS_INT *pValue);

// void * array
typedef VOID *OS_VOIDARRAY_HANDLE;
OS_VOIDARRAY_HANDLE OS_VOIDARRAY_CreateInstance(CHNSYS_UINT nInitSize);
VOID OS_VOIDARRAY_DestroyInstance(OS_VOIDARRAY_HANDLE hVOIDArray);
CHNSYS_INT OS_VOIDARRAY_Add(OS_VOIDARRAY_HANDLE hVOIDArray, VOID *pValue);
CHNSYS_INT OS_VOIDARRAY_Set(OS_VOIDARRAY_HANDLE hVOIDArray, CHNSYS_INT nIndex, VOID *pValue);
CHNSYS_INT OS_VOIDARRAY_Insert(OS_VOIDARRAY_HANDLE hVOIDArray, CHNSYS_INT nIndex, VOID *pValue);
CHNSYS_INT OS_VOIDARRAY_Remove(OS_VOIDARRAY_HANDLE hVOIDArray, CHNSYS_INT nIndex);
CHNSYS_INT OS_VOIDARRAY_RemoveAll(OS_VOIDARRAY_HANDLE hVOIDArray);
CHNSYS_INT OS_VOIDARRAY_Count(OS_VOIDARRAY_HANDLE hVOIDArray);
CHNSYS_INT OS_VOIDARRAY_At(OS_VOIDARRAY_HANDLE hVOIDArray, CHNSYS_INT nIndex, VOID **ppValue);

// min-heap
typedef VOID *OS_HEAP_HANDLE;
typedef VOID *OS_HEAPELEMENT_HANDLE;
OS_HEAPELEMENT_HANDLE OS_HEAPELEMENT_CreateInstance(CHNSYS_UINT64 nValue, VOID *pObject);
VOID OS_HEAPELEMENT_DestroyInstance(OS_HEAPELEMENT_HANDLE hHeapElement);
CHNSYS_BOOL OS_HEAPELEMENT_GetValue(OS_HEAPELEMENT_HANDLE hHeapElement, CHNSYS_UINT64 *pValue);
CHNSYS_BOOL OS_HEAPELEMENT_SetValue(OS_HEAPELEMENT_HANDLE hHeapElement, CHNSYS_UINT64 nValue);
CHNSYS_BOOL OS_HEAPELEMENT_GetObject(OS_HEAPELEMENT_HANDLE hHeapElement, VOID **ppObject);
CHNSYS_BOOL OS_HEAPELEMENT_SetObject(OS_HEAPELEMENT_HANDLE hHeapElement, VOID *pObject);
CHNSYS_BOOL OS_HEAPELEMENT_GetHeap(OS_HEAPELEMENT_HANDLE hHeapElement, OS_HEAP_HANDLE *phHeap);

OS_HEAP_HANDLE OS_HEAP_CreateInstance(CHNSYS_UINT nInitSize);
VOID OS_HEAP_DestroyInstance(OS_HEAP_HANDLE hHeap);
CHNSYS_BOOL OS_HEAP_Insert(OS_HEAP_HANDLE hHeap,OS_HEAPELEMENT_HANDLE hHeapElement);
CHNSYS_BOOL OS_HEAP_ExtractMin(OS_HEAP_HANDLE hHeap, OS_HEAPELEMENT_HANDLE *phHeapElement);
CHNSYS_BOOL OS_HEAP_PeekMin(OS_HEAP_HANDLE hHeap, OS_HEAPELEMENT_HANDLE *phHeapElement);
CHNSYS_BOOL OS_HEAP_Remove(OS_HEAP_HANDLE hHeap, OS_HEAPELEMENT_HANDLE hHeapElement);
CHNSYS_BOOL OS_HEAP_RemoveAll(OS_HEAP_HANDLE hHeap);
CHNSYS_INT OS_HEAP_Count(OS_HEAP_HANDLE hHeap);

// queue
typedef VOID *OS_QUEUE_HANDLE;
typedef VOID *OS_QUEUEELEMENT_HANDLE;
OS_QUEUEELEMENT_HANDLE OS_QUEUEELEMENT_CreateInstance(VOID *pObject);
VOID OS_QUEUEELEMENT_DestroyInstance(OS_QUEUEELEMENT_HANDLE hQueueElement);
CHNSYS_BOOL OS_QUEUEELEMENT_GetObject(OS_QUEUEELEMENT_HANDLE hQueueElement, VOID **ppObject);
CHNSYS_BOOL OS_QUEUEELEMENT_SetObject(OS_QUEUEELEMENT_HANDLE hQueueElement, VOID *pObject);
CHNSYS_BOOL OS_QUEUEELEMENT_GetQueue(OS_QUEUEELEMENT_HANDLE hQueueElement, OS_QUEUE_HANDLE *phQueue);
OS_QUEUE_HANDLE OS_QUEUE_CreateInstance();
VOID OS_QUEUE_DestroyInstance(OS_QUEUE_HANDLE hQueue);
CHNSYS_BOOL OS_QUEUE_Push(OS_QUEUE_HANDLE hQueue, OS_QUEUEELEMENT_HANDLE hQueueElement);
CHNSYS_BOOL OS_QUEUE_Pop(OS_QUEUE_HANDLE hQueue, OS_QUEUEELEMENT_HANDLE *phQueueElement);
CHNSYS_BOOL OS_QUEUE_GetHead(OS_QUEUE_HANDLE hQueue, OS_QUEUEELEMENT_HANDLE *phQueueElement);
CHNSYS_BOOL OS_QUEUE_GetTail(OS_QUEUE_HANDLE hQueue, OS_QUEUEELEMENT_HANDLE *phQueueElement);
CHNSYS_INT OS_QUEUE_Count(OS_QUEUE_HANDLE hQueue);

#endif //_CHNSYSCONTAINERS_H_
